// https://github.com/dfinity/ICRC/blob/main/ICRCs/ICRC-7/ICRC-7.did

type Subaccount = blob;

type Account = record { owner : principal; subaccount : opt Subaccount };

// Generic value in accordance with ICRC-3
type Value = variant {
    Blob : blob;
    Text : text;
    Nat : nat;
    Int : int;
    Array : vec Value;
    Map : vec record { text; Value };
};

type TransferArg = record {
    from_subaccount: opt blob; // The subaccount to transfer the token from
    to : Account;
    token_id : nat;
    memo : opt blob;
    created_at_time : opt nat64;
};

type TransferResult = variant {
    Ok : nat; // Transaction index for successful transfer
    Err : TransferError;
};

type TransferError = variant {
    NonExistingTokenId;
    InvalidRecipient;
    Unauthorized;
    TooOld;
    CreatedInFuture : record { ledger_time: nat64 };
    Duplicate : record { duplicate_of : nat };
    GenericError : record { error_code : nat; message : text };
    GenericBatchError : record { error_code : nat; message : text };
};

service : {
    icrc7_token_metadata : (token_ids : vec nat)-> (vec record { nat; opt record { text; Value } }) query;
}